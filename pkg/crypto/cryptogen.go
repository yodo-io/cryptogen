package crypto

// Peers template in a crypto request
type Peers struct {
	Count int `json:"Count"     yaml:"Count"     binding:"required"`
}

// Users template in a crypto request
type Users struct {
	Count int `json:"Count"     yaml:"Count"     binding:"required"`
}

// PeerOrg is an org in a crypto request
type PeerOrg struct {
	Name     string `json:"Name"      yaml:"Name"      binding:"required"`
	Domain   string `json:"Domain"    yaml:"Domain"    binding:"required"`
	Template Peers  `json:"Template"  yaml:"Template"  binding:"required"`
	Users    Users  `json:"Users"     yaml:"Users"     binding:"required"`
}

// GenerateCryptoRequest is basically the 'crypto-config.yaml' used by the cryptogen utility
// Currently this is very incomplete, only PeerOrgs are supported in a very basic way
type GenerateCryptoRequest struct {
	PeerOrgs []PeerOrg `json:"PeerOrgs" yaml:"PeerOrgs"`
}

// Asset is a set of crypto assets generated by cryptogen. It has a storage path and a
// map of entries, each mapped from a name. Think about a single flat directly with the
// crypto assets being files - essentially the structure generated by `cryptogen`
type Asset struct {
	Path    string
	Entries map[string]interface{}
}

// Provider interface for a crypto assets service
type Provider interface {
	GenerateAssets(taskID string, req GenerateCryptoRequest) ([]Asset, error)
}
